services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medplatform_backend
    restart: unless-stopped
    ports:
      # پورت 5000 کانتینر را به پورت 5050 سرور اپلیکیشن (سرور B) متصل می‌کند
      - "5050:5000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medplatform_frontend
    restart: unless-stopped
    ports:
      # پورت 80 کانتینر را به پورت 5177 سرور اپلیکیشن (سرور B) متصل می‌کند
      - "5177:80"

  db:
    image: mysql:8.0
    container_name: medplatform_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${DB_ROOT_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_data:
# در این معماری ساده، نیازی به تعریف شبکه‌های پیچیده نیست.
# داکر به صورت خودکار یک شبکه داخلی برای این سه سرویس می‌سازد.
